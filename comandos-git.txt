git init :para iniciar un repositorio git dentro de una carpeta

///////////eliminar archivo/////////
rm archivo.txt:para eliminar archivo luego se debe agegar a la estapa de stage.
git add archivo.txt:asi lo agregamos a  la etapa de stage.
git status :prar ve en que etapa se encuentra, luego hacer commit para que los cambios surgan.
git commint -m "eliminando archivo":aqui hacemos commit y ponemos un msj que haga sentido.

  todo esto no lo podemos ahorrar solo escribiendo : git rm archivo.txt 

///////////////////////////////////////////////////////////////////////////////////////////
git restore --stage archivo.txt : esto para sacar algun cambio que hayamos pasado a la etapa de stage.
git restore archivo.txt :con esto podemos recuperar el archivo eliminado.


////////////////////mover o cambiar nombre/////////////////////
mv archivo.txt archivo1.txt :para cambiar de un nombre a otro.
git status:ver el estado.
git add archivo.txt archivo1.txt :se deben de aggregar los dos asi para poder hacer el cambio de nombre
git commit -m "renombrando archivo":por ultimo hacer el commit para que surja efecto.   
////////////////////////////
git mv archivo.txt archivo1.txt : para cambiar de un nombre a otro y lo aggrega a stage sin tener que hacer todo lo anterior pero igual debes hacer commit para cambiar la etapa.


///////para hacer que un archivo no se incluya nunca en nuestro repositorio/////////
creas un archivo que se debe llamar .gitignore sin extencion que dentro contenga la ruta de los archivos a ignorar y este archivo creado le hacemos commit para que git omita las rutas que tiene adentro.

////////////////para ver menos informacion de el status usamos : git status -s 
para mostrar mas informacion detallada de cambios realizados que no se a pasado aun a la etapa de stage:git diff
para mostrar mas informaccion detallada de cambios realizados que estan en la etapa de stage:git diff --staged


///////////////////para ver todo el historial de todo nuetro repositorio////////////////////
git log :nos muestra el historial detallado junto con los datos de quien realizo los cambios.
git log --oneline:nos muestra el historial junto a un peque√±o hash de identificacion junto a el mensaje que agregamos del commit.

/////////////////////////////////////branch o ramas //////////////////////////////////////////

git branch : esto nos indica en que rama estamos y que ramas hay.
git checkout -b ramaNueva: asi creamos una rama nueva.
git checkout master :para cambiarte de rama.
git merge ramaNueva :para traer los cambios que se hizo en una rama a la rama master usamos esto desde la rama a donde la queremos traer.

////////////////////////////////////como subir el codigo a la nueve//////////////////////////////////////
git remote add origin https://github.com/kripto-c/curso-github.git : con esto enlazamos nuestro repositorio a nuestro git ese link lo sacas de github despues de crearlo.

git push -u origin main :aqui estamos creando la rama main dentro de nuestro repositorio github.
nos pedira nuestro nombre de usuario y una key que conseguimos en github.

con esto ya estara configurado tu repositorio cuando vayas a scribir mas codigo solo debes hacer lo anterios primero lo pasas al stage luego el commit y finalmente : git push

nota# en caso de que estes trabajando en una rama y la quieres subir sin hacer un merge usa : git push -u origin ramaNueva 


